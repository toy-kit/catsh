// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * AppConfig app.yml
 */
export class AppConfig {
    "info": AppConfigInfo;
    "repository": AppConfigRepository;
    "os": string;

    /** Creates a new AppConfig instance. */
    constructor($$source: Partial<AppConfig> = {}) {
        if (!("info" in $$source)) {
            this["info"] = (new AppConfigInfo());
        }
        if (!("repository" in $$source)) {
            this["repository"] = (new AppConfigRepository());
        }
        if (!("os" in $$source)) {
            this["os"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): AppConfig {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("info" in $$parsedSource) {
            $$parsedSource["info"] = $$createField0_0($$parsedSource["info"]);
        }
        if ("repository" in $$parsedSource) {
            $$parsedSource["repository"] = $$createField1_0($$parsedSource["repository"]);
        }
        return new AppConfig($$parsedSource as Partial<AppConfig>);
    }
}

export class AppConfigInfo {
    "companyName": string;
    "productName": string;
    "description": string;
    "copyright": string;
    "version": string;

    /** Creates a new AppConfigInfo instance. */
    constructor($$source: Partial<AppConfigInfo> = {}) {
        if (!("companyName" in $$source)) {
            this["companyName"] = "";
        }
        if (!("productName" in $$source)) {
            this["productName"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("copyright" in $$source)) {
            this["copyright"] = "";
        }
        if (!("version" in $$source)) {
            this["version"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppConfigInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): AppConfigInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppConfigInfo($$parsedSource as Partial<AppConfigInfo>);
    }
}

export class AppConfigRepository {
    "author": string;
    "email": string;
    "url": string;
    "homepage": string;

    /** Creates a new AppConfigRepository instance. */
    constructor($$source: Partial<AppConfigRepository> = {}) {
        if (!("author" in $$source)) {
            this["author"] = "";
        }
        if (!("email" in $$source)) {
            this["email"] = "";
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }
        if (!("homepage" in $$source)) {
            this["homepage"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppConfigRepository instance from a string or object.
     */
    static createFrom($$source: any = {}): AppConfigRepository {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppConfigRepository($$parsedSource as Partial<AppConfigRepository>);
    }
}

export class AppData {
    "app_config": AppConfig;
    "config": Config;
    "window_options": WindowOptions;
    "locales": { [_: string]: { [_: string]: any } };

    /** Creates a new AppData instance. */
    constructor($$source: Partial<AppData> = {}) {
        if (!("app_config" in $$source)) {
            this["app_config"] = (new AppConfig());
        }
        if (!("config" in $$source)) {
            this["config"] = (new Config());
        }
        if (!("window_options" in $$source)) {
            this["window_options"] = (new WindowOptions());
        }
        if (!("locales" in $$source)) {
            this["locales"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppData instance from a string or object.
     */
    static createFrom($$source: any = {}): AppData {
        const $$createField0_0 = $$createType2;
        const $$createField1_0 = $$createType3;
        const $$createField2_0 = $$createType4;
        const $$createField3_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("app_config" in $$parsedSource) {
            $$parsedSource["app_config"] = $$createField0_0($$parsedSource["app_config"]);
        }
        if ("config" in $$parsedSource) {
            $$parsedSource["config"] = $$createField1_0($$parsedSource["config"]);
        }
        if ("window_options" in $$parsedSource) {
            $$parsedSource["window_options"] = $$createField2_0($$parsedSource["window_options"]);
        }
        if ("locales" in $$parsedSource) {
            $$parsedSource["locales"] = $$createField3_0($$parsedSource["locales"]);
        }
        return new AppData($$parsedSource as Partial<AppData>);
    }
}

/**
 * Config config.ini
 */
export class Config {
    "theme": string;
    "locale": string;

    /** Creates a new Config instance. */
    constructor($$source: Partial<Config> = {}) {
        if (!("theme" in $$source)) {
            this["theme"] = "";
        }
        if (!("locale" in $$source)) {
            this["locale"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     */
    static createFrom($$source: any = {}): Config {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Config($$parsedSource as Partial<Config>);
    }
}

export class WindowOptions {
    "name": string;
    "title": string;
    "width": number;
    "height": number;
    "min_width": number;
    "min_height": number;
    "resizable": boolean;
    "url": string;

    /** Creates a new WindowOptions instance. */
    constructor($$source: Partial<WindowOptions> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("width" in $$source)) {
            this["width"] = 0;
        }
        if (!("height" in $$source)) {
            this["height"] = 0;
        }
        if (!("min_width" in $$source)) {
            this["min_width"] = 0;
        }
        if (!("min_height" in $$source)) {
            this["min_height"] = 0;
        }
        if (!("resizable" in $$source)) {
            this["resizable"] = false;
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new WindowOptions instance from a string or object.
     */
    static createFrom($$source: any = {}): WindowOptions {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new WindowOptions($$parsedSource as Partial<WindowOptions>);
    }
}

// Private type creation functions
const $$createType0 = AppConfigInfo.createFrom;
const $$createType1 = AppConfigRepository.createFrom;
const $$createType2 = AppConfig.createFrom;
const $$createType3 = Config.createFrom;
const $$createType4 = WindowOptions.createFrom;
const $$createType5 = $Create.Map($Create.Any, $Create.Any);
const $$createType6 = $Create.Map($Create.Any, $$createType5);
